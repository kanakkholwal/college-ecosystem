name: üöÄ Deployments

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

jobs:
  lint:
    uses: ./.github/workflows/lint.yml

  deploy:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: üõ†Ô∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üíæ Cache Vercel CLI
        uses: actions/cache@v4
        with:
          path: ~/.vercel
          key: ${{ runner.OS }}-vercel-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-vercel-

      - name: üì¶ Install Vercel CLI
        run: npm install -g vercel

      - name: üîç Detect changed projects
        id: changed
        run: |
          git diff --quiet HEAD^ HEAD ./apps/platform || echo "platform_changed=true" >> $GITHUB_OUTPUT
          git diff --quiet HEAD^ HEAD ./apps/website || echo "website_changed=true" >> $GITHUB_OUTPUT
          git diff --quiet HEAD^ HEAD ./apps/server || echo "server_changed=true" >> $GITHUB_OUTPUT

      - name: üéØ Deploy Platform to Staging
        if: github.ref == 'refs/heads/staging' && steps.changed.outputs.platform_changed == 'true'
        run: vercel --token ${VERCEL_TOKEN} ./apps/platform
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PLATFORM_PROJECT_ID }}

      - name: üöÄ Deploy Platform to Production
        if: github.ref == 'refs/heads/main' && steps.changed.outputs.platform_changed == 'true'
        run: vercel --token ${VERCEL_TOKEN} --prod ./apps/platform
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PLATFORM_PROJECT_ID }}

      - name: üåê Deploy Website to Production
        if: github.ref == 'refs/heads/main' && steps.changed.outputs.website_changed == 'true'
        run: vercel --token ${VERCEL_TOKEN} --prod ./apps/website
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WEBSITE_PROJECT_ID }}
      
      - name: üîê Google Cloud Authentication
        if: steps.changed.outputs.server_changed == 'true'
        uses: google-github-actions/auth@v2
        with:
            credentials_json: ${{ secrets.CREDENTIALS_JSON }}
            project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: üèóÔ∏è Build and Push Docker Image
        if: steps.changed.outputs.server_changed == 'true'
        working-directory: ./apps/server/
        run: |
          pwd  # Print current working directory
          # ls -la
          # if [ ! -f Dockerfile ]; then
          #   echo "ERROR: Dockerfile not found!"
          #   exit 1
          # fi
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/college-ecosystem-server:latest .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/college-ecosystem-server:latest
  
      - name: üöÄ Deploy to Cloud Run (Staging)
        if: github.ref == 'refs/heads/staging' && steps.changed.outputs.server_changed == 'true'
        uses: google-github-actions/deploy-cloudrun@v2
        with:
            service: server-staging
            image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/college-ecosystem-server:latest
            region: ${{ secrets.GCP_PROJECT_REGION }} # Adjust to your preferred region
            env_vars: |
              NODE_ENV=staging
              IDENTITY_KEY=${{ secrets.IDENTITY_KEY }} // Change this to your own key


      - name: üöÄ Deploy to Cloud Run (Production)
        if: github.ref == 'refs/heads/main' && steps.changed.outputs.server_changed == 'true'
        uses: google-github-actions/deploy-cloudrun@v2
        with:
            service: server-production
            image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/college-ecosystem-server:latest
            region: ${{ secrets.GCP_PROJECT_REGION }} # Adjust to your preferred region
            env_vars: |
              NODE_ENV=production
              IDENTITY_KEY=${{ secrets.IDENTITY_KEY }} // Change this to your own key

      