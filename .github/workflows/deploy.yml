name: üöÄ Deployments


on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

jobs:
  lint:
    uses: ./.github/workflows/lint.yml

  deploy-frontend-to-vercel: 
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ./

      - name: üõ†Ô∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üíæ Cache Vercel CLI
        uses: actions/cache@v4
        with:
          path: ~/.vercel
          key: ${{ runner.OS }}-vercel-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-vercel-

      - name: üì¶ Install Vercel CLI
        run: npm install -g vercel

      - name: üîç Detect changed projects
        id: changed
        run: |
          git diff --quiet HEAD^ HEAD ./apps/platform || echo "platform_changed=true" >> $GITHUB_OUTPUT
          git diff --quiet HEAD^ HEAD ./apps/website || echo "website_changed=true" >> $GITHUB_OUTPUT
          git diff --quiet HEAD^ HEAD ./apps/server || echo "server_changed=true" >> $GITHUB_OUTPUT

      - name: üéØ Deploy Platform to Staging
        if: github.ref == 'refs/heads/staging' && steps.changed.outputs.platform_changed == 'true'
        run: vercel --token ${VERCEL_TOKEN} ./apps/platform
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PLATFORM_PROJECT_ID }}

      - name: üöÄ Deploy Platform to Production
        if: github.ref == 'refs/heads/main' && steps.changed.outputs.platform_changed == 'true'
        run: vercel --token ${VERCEL_TOKEN} --prod ./apps/platform
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PLATFORM_PROJECT_ID }}

      - name: üåê Deploy Website to Production
        if: github.ref == 'refs/heads/main' && steps.changed.outputs.website_changed == 'true'
        run: vercel --token ${VERCEL_TOKEN} --prod ./apps/website
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WEBSITE_PROJECT_ID }}
      
  dockerize-and-deploy-server:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'

    steps:
          - name: Checkout repository
            uses: actions/checkout@v2
    
          - name: Google Cloud Auth
            uses: 'google-github-actions/auth@v2'
            with:
              credentials_json: '${{ secrets.CREDENTIALS_JSON }}'
              project_id: ${{ secrets.GCP_PROJECT_ID }}
    
          - name: Set up Cloud SDK
            uses: 'google-github-actions/setup-gcloud@v2'
    
          - name: Configure Docker
            run: |
              gcloud auth configure-docker ${{ secrets.GCP_PROJECT_REGION }}.pkg.dev
    
          - name: Build and Push Docker Image
            run: |
              IMAGE_NAME="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{env.SERVICE_NAME_SERVER}}:latest"
              docker build -t "$IMAGE_NAME" -f ./apps/server/Dockerfile .
              docker push "$IMAGE_NAME"
    
          - name: Deploy to Cloud Run
            run: |
              IMAGE_NAME="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{env.SERVICE_NAME_SERVER}}:latest"
              gcloud run deploy ${{env.SERVICE_NAME_SERVER}} \
                --image  "$IMAGE_NAME" \
                --platform managed \
                --region ${{ secrets.GCP_PROJECT_REGION }} \
                --allow-unauthenticated   