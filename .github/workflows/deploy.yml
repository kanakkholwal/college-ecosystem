name: üöÄ Deployments

env:
  SERVICE_NAME_SERVER: "college-ecosystem-server"
  DOCKER_REGISTRY: "asia-southeast1"

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:


jobs:
  # lint:
  #   uses: ./.github/workflows/lint.yml

  # deploy-frontend-to-vercel:
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: üì• Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 2  # Fetch the current commit and its immediate parent
          
  #     - name: üîç Detect changed projects
  #       id: changed
  #       run: |
  #             git diff --quiet HEAD^ HEAD ./apps/platform || echo "platform_changed=true" >> $GITHUB_OUTPUT
  #             git diff --quiet HEAD^ HEAD ./apps/website || echo "website_changed=true" >> $GITHUB_OUTPUT

  #     - name: üõ†Ô∏è Setup Node.js
  #       uses: actions/setup-node@v4
  #       if: steps.changed.outputs.platform_changed == 'true' || steps.changed.outputs.website_changed == 'true'
  #       with:
  #         node-version: '20'

  #     - name: üíæ Cache Vercel CLI
  #       uses: actions/cache@v4
  #       if: steps.changed.outputs.platform_changed == 'true' || steps.changed.outputs.website_changed == 'true'
  #       with:
  #         path: ~/.vercel
  #         key: ${{ runner.os }}-vercel-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-vercel-

  #     - name: üì¶ Install Vercel CLI
  #       if: steps.changed.outputs.platform_changed == 'true' || steps.changed.outputs.website_changed == 'true'
  #       run: npm install -g vercel


  #     - name: üéØ Deploy Platform to Staging
  #       if: github.ref == 'refs/heads/staging' && steps.changed.outputs.platform_changed == 'true'
  #       run: vercel --token ${{ secrets.VERCEL_TOKEN }} ./apps/platform
  #       env:
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PLATFORM_PROJECT_ID }}

  #     - name: üöÄ Deploy Platform to Production
  #       if: github.ref == 'refs/heads/main' && steps.changed.outputs.platform_changed == 'true'
  #       run: vercel --token ${{ secrets.VERCEL_TOKEN }} --prod ./apps/platform
  #       env:
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PLATFORM_PROJECT_ID }}

  #     - name: üåê Deploy Website to Production
  #       if: github.ref == 'refs/heads/main' && steps.changed.outputs.website_changed == 'true'
  #       run: vercel --token ${{ secrets.VERCEL_TOKEN }} --prod ./apps/website
  #       env:
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WEBSITE_PROJECT_ID }}

  dockerize-and-deploy-server:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Check changes in Server Directory
        id: server-changed
        run: |
          git diff --quiet HEAD^ HEAD ./apps/server || echo "server_changed=true" >> $GITHUB_OUTPUT
          git diff --quiet HEAD^ HEAD ./apps/server/Dockerfile || echo "dockerfile_changed=true" >> $GITHUB_OUTPUT

      - name: üîë Set up Google Cloud Auth SDK
        # if: steps.server-changed.outputs.server_changed == 'true'
        uses: google-github-actions/auth@v2
        id: auth
        with:
          credentials_json: ${{ secrets.CREDENTIALS_JSON }}
          # username: _json_key
          # password: ${{ secrets.CREDENTIALS_JSON }}
          project_id: ${{ secrets.GCP_PROJECT_ID }} 
          token_format: access_token
          # workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
            
      - name: ‚öôÔ∏è Log in Docker to GCR
        uses: docker/login-action@v2
        with:
            registry: gcr.io
            username: oauth2accesstoken
            password: ${{ steps.auth.outputs.access_token }}
            # registry: '${{ env.DOCKER_REGISTRY }}-docker.pkg.dev'


      # - name: ‚öôÔ∏è Configure Docker
      #   if: steps.server-changed.outputs.server_changed == 'true'
      #   run: gcloud auth configure-docker asia-southeast1-docker.pkg.dev
      
      
      - name: üê≥ Build and Push Docker Image
        # if:  steps.server-changed.outputs.dockerfile_changed == 'true'
        run: |
          IMAGE_NAME="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME_SERVER }}:latest"
          docker build --pull --rm -f "apps/server/Dockerfile" -t "${IMAGE_NAME}" "apps/server"
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://asia-southeast1-docker.pkg.dev
          docker push "${IMAGE_NAME}"

      - name: üöÄ Deploy to Cloud Run
        if: steps.server-changed.outputs.server_changed == 'true'
        run: |
          IMAGE_NAME="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME_SERVER }}:latest"
          gcloud run deploy ${{ env.SERVICE_NAME_SERVER }} \
            --image "${IMAGE_NAME}" \
            --platform managed \
            --region ${{ secrets.GCP_PROJECT_REGION }} \
            --allow-unauthenticated
