name: üöÄ Deployments of Microservices

env:
  SERVICE_NAME_SERVER: "college-ecosystem-server"

# on: workflow_dispatch

on:
  push:
    branches:
      - main
      - staging
      
  # workflow_dispatch:

concurrency:
  group:  ${{ github.workflow }}-${{ github.ref }}-servers-deploy
  cancel-in-progress: true
  
jobs:  

  # deploy-mail-server:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     deployments: write
  #   name: Deploy to Cloudflare Workers (Mail Server)
  #   defaults:
  #     run:
  #       working-directory: apps/mail-server
  #   steps:
  #     - name: üì• Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: üîç Detect changed projects
  #       id: changed
  #       run: |
  #             git diff --quiet HEAD^ HEAD ./apps/mail-server || echo "mail_server_changed=true" >> $GITHUB_OUTPUT
      
  #     # - uses: pnpm/action-setup@v4

  #     - name: üõ†Ô∏è Setup Node.js
  #       uses: actions/setup-node@v4
  #       if: steps.changed.outputs.mail_server_changed == 'true'
  #       with:
  #         node-version: 20.x
  #         cache: "npm"

  #     - name: üíæ Cache Next.js build
  #       uses: actions/cache@v4
  #       if: steps.changed.outputs.mail_server_changed == 'true'
  #       with:
  #         path: ${{ github.workspace }}/apps/mail-server/.open-next/cache
  #         key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('apps/mail-server/**/*.[jt]s', 'apps/mail-server/**/*.[jt]sx') }}
  #         restore-keys: |
  #           ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  #     - name: üì¶ Install dependencies
  #       if: steps.changed.outputs.mail_server_changed == 'true'
  #       run: npm install

  #     - name: üèóÔ∏è Build project
  #       run: npm run opennext:build

  #     - name: Deploy
  #       run: npm run opennext:deploy
  #       env:
  #         CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
  #         CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  #         SMTP_HOST: ${{ secrets.SMTP_HOST }}
  #         MAIL_EMAIL: ${{ secrets.MAIL_EMAIL }}
  #         MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  #         SERVER_IDENTITY: ${{ secrets.SERVER_IDENTITY }}


  dockerize-and-deploy-server:
    # needs: lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Check changes in Server Directory
        id: server-changed
        run: |
          git diff --quiet HEAD^ HEAD ./apps/server || echo "server_changed=true" >> $GITHUB_OUTPUT
          git diff --quiet HEAD^ HEAD ./apps/server/Dockerfile || echo "dockerfile_changed=true" >> $GITHUB_OUTPUT

      - name: üîë Set up Google Cloud Auth SDK
        if: steps.server-changed.outputs.server_changed == 'true'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.CREDENTIALS_JSON }}
            
      - name: üöÄ Deploy to Cloud Run (from source, no Artifact Registry)
        if: steps.server-changed.outputs.server_changed == 'true'
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME_SERVER }} \
            --source ./apps/server \
            --region ${{ secrets.GCP_PROJECT_REGION }} \
            --platform managed \
            --allow-unauthenticated

      # - name: ‚öôÔ∏è Log in Docker to GCR
      #   if: steps.server-changed.outputs.server_changed == 'true'
      #   uses: docker/login-action@v2
      #   with:
      #       registry: gcr.io
      #       username: _json_key
      #       password:  ${{ secrets.CREDENTIALS_JSON }}
      
      # - name: üê≥ Build and Push Docker Image
      #   if:  steps.server-changed.outputs.dockerfile_changed == 'true'
      #   run: |
      #     IMAGE_NAME="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME_SERVER }}:latest"
      #     docker build --pull --rm -f "apps/server/Dockerfile" -t "${IMAGE_NAME}" "apps/server"
      #     docker push "${IMAGE_NAME}"

      # - name: üöÄ Deploy to Cloud Run 
      #   if: success()
      #   run: |  
      #     IMAGE_NAME="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME_SERVER }}:latest"
      #     gcloud run deploy ${{ env.SERVICE_NAME_SERVER }} \
      #       --image "${IMAGE_NAME}" \
      #       --platform managed \
      #       --region ${{ secrets.GCP_PROJECT_REGION }} \
      #       --allow-unauthenticated

